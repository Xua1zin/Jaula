/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Telas;

import dao.CadastroFormularioDao;
import dao.CadastroPacienteDao;
import dao.CadastroUsuarioDao;
import java.awt.event.MouseEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javax.swing.table.DefaultTableModel;
import model.CadastroFormularioModel;
import model.CadastroPacienteModel;
import model.CadastroUsuarioModel;
import model.FiltroFormulario;
import model.FiltroPaciente;
import model.FiltroUsuario;

/**
 *
 * @author Maria Beatriz
 */
public class Tabelas extends javax.swing.JFrame {

    private int adminStatus;
    private final ArrayList<CadastroFormularioModel> listaFormFiltrada = new ArrayList<>();
    private final ArrayList<CadastroUsuarioModel> listaUsuarioFiltrada = new ArrayList<>();
    private final ArrayList<CadastroPacienteModel> listaPacienteFiltrada = new ArrayList<>();

    public void setAdminStatus(int adminStatus) {
        this.adminStatus = adminStatus;
    }

    /**
     * Creates new form TabelaFormulario
     */
    public Tabelas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane78 = new javax.swing.JScrollPane();
        jTbFormulario = new javax.swing.JTable();
        jBNovoForm = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTFFormID = new javax.swing.JTextField();
        jTFPacientID = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jTFNome = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jFFDataNascimento = new javax.swing.JFormattedTextField();
        jLabel9 = new javax.swing.JLabel();
        jCFStatus = new javax.swing.JComboBox<>();
        jLabel16 = new javax.swing.JLabel();
        jBFPesquisar = new javax.swing.JButton();
        jBCancelar = new javax.swing.JButton();
        jBReverter = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane80 = new javax.swing.JScrollPane();
        jTbPaciente = new javax.swing.JTable();
        jBNovoPaciente = new javax.swing.JButton();
        jTPNome = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTPPacientID = new javax.swing.JTextField();
        jFPDataNascimento = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jBPPesquisar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane79 = new javax.swing.JScrollPane();
        jTbUsuario = new javax.swing.JTable();
        jBNovoUsuario = new javax.swing.JButton();
        jTUUserID = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jTUCRN = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jFUDataNascimento = new javax.swing.JFormattedTextField();
        jLabel14 = new javax.swing.JLabel();
        jCUStatus = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jTUNome = new javax.swing.JTextField();
        jBUPesquisar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jTbFormulario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Formulário", "ID Paciente", "Nome", "Sexo", "Data de Nascimento", "Data do Exame", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbFormulario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTbFormularioMouseClicked(evt);
            }
        });
        jScrollPane78.setViewportView(jTbFormulario);

        jBNovoForm.setText("Novo Formulário");
        jBNovoForm.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBNovoFormMouseClicked(evt);
            }
        });

        jLabel5.setText("Pesquisar:");

        jLabel6.setText("ID Formulário");

        jLabel7.setText("ID Paciente");

        jLabel8.setText("Nome");

        try {
            jFFDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**/**/****")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel9.setText("Data de nascimento");

        jCFStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   ", "Cancelado", "Em andamento", "Concluído" }));

        jLabel16.setText("Status");

        jBFPesquisar.setText("Pesquisar");
        jBFPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBFPesquisarMouseClicked(evt);
            }
        });

        jBCancelar.setText("Cancelar");
        jBCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBCancelarMouseClicked(evt);
            }
        });

        jBReverter.setText("Reverter");
        jBReverter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBReverterMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane78, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTFFormID, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jTFPacientID, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addComponent(jFFDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jCFStatus, 0, 1, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(jBFPesquisar))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jBNovoForm, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jBCancelar)
                                .addGap(18, 18, 18)
                                .addComponent(jBReverter)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jBNovoForm, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTFFormID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTFPacientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTFNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFFDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel16)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jCFStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBFPesquisar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 41, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBCancelar)
                    .addComponent(jBReverter))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane78, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.addTab("Formulário", jPanel1);

        jTbPaciente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Paciente", "Nome", "Data de Nascimento", "CPF", "RG", "Sexo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTbPacienteMouseClicked(evt);
            }
        });
        jScrollPane80.setViewportView(jTbPaciente);

        jBNovoPaciente.setText("Novo Paciente");
        jBNovoPaciente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBNovoPacienteMouseClicked(evt);
            }
        });

        jLabel1.setText("Nome");

        jLabel2.setText("Pesquisar:");

        jLabel3.setText("ID");

        try {
            jFPDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("**/**/****")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel4.setText("Data de nascimento");

        jBPPesquisar.setText("Pesquisar");
        jBPPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBPPesquisarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane80, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBNovoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jTPPacientID, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTPNome, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jFPDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBPPesquisar)
                                .addGap(21, 21, 21))))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jBNovoPaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTPNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTPPacientID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jFPDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBPPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane80, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Paciente", jPanel3);

        jTbUsuario.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID Usuario", "Usuário", "CRN", "Nome", "Data de Nascimento", "CPF", "Sexo", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTbUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTbUsuarioMouseClicked(evt);
            }
        });
        jScrollPane79.setViewportView(jTbUsuario);

        jBNovoUsuario.setText("Novo Usuário");
        jBNovoUsuario.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBNovoUsuarioMouseClicked(evt);
            }
        });

        jLabel10.setText("ID Usuário");

        jLabel11.setText("Pesquisar:");

        jLabel12.setText("CRN");

        jLabel13.setText("Nome");

        try {
            jFUDataNascimento.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        jLabel14.setText("Data de nascimento");

        jCUStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "   ", "Ativo", "Inativo" }));

        jLabel15.setText("Status");

        jBUPesquisar.setText("Pesquisar");
        jBUPesquisar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBUPesquisarMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jScrollPane79, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel11)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jTUUserID, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jTUCRN, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jTUNome, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jFUDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel15)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jCUStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jBUPesquisar))))
                    .addComponent(jBNovoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jBNovoUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTUUserID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTUCRN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTUNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(28, 28, 28))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jFUDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jCUStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jBUPesquisar))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane79, javax.swing.GroupLayout.DEFAULT_SIZE, 382, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Usuário", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 792, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTbFormularioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTbFormularioMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            new Thread() {
                @Override
                public void run() {
                    try {
                        if (jTbFormulario.getSelectedRow() != -1) {
                            int linha = jTbFormulario.getSelectedRow();

                            CadastroFormularioModel cadastroSelecionado = listaFormFiltrada.get(linha);

                            CadastroFormulario cadastroFormulario = new CadastroFormulario();
                            cadastroFormulario.setVisible(true);

                            cadastroFormulario.jTFormularioID.setText(String.valueOf(cadastroSelecionado.getFormID()));
                            cadastroFormulario.jTPacienteID.setText(String.valueOf(cadastroSelecionado.getPatientID()));
                            cadastroFormulario.jTPacienteNome.setText(cadastroSelecionado.getPatientName());

                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                            String dataFormatadaExame = dateFormat.format(cadastroSelecionado.getFormExamDate());
                            cadastroFormulario.jFFormularioDtExame.setText(dataFormatadaExame);

                            String dataFormatadaNascimento = dateFormat.format(cadastroSelecionado.getPatientBirthdate());
                            cadastroFormulario.jFPacienteNascimento.setText(dataFormatadaNascimento);
                            preencherIdade(cadastroFormulario);

                            cadastroFormulario.jCPacienteSexo.setSelectedItem(cadastroSelecionado.getSexName());
                            cadastroFormulario.jTFormularioAltura.setText(String.valueOf(cadastroSelecionado.getFormHeight()));
                            cadastroFormulario.jTFormularioPeso.setText(String.valueOf(cadastroSelecionado.getFormWeight()));
                            cadastroFormulario.jTFormularioIMC.setText(cadastroSelecionado.getImcName());
                            cadastroFormulario.jTFormularioPescoco.setText(String.valueOf(cadastroSelecionado.getFormNeckWidth()));
                            cadastroFormulario.jTFormularioCintura.setText(String.valueOf(cadastroSelecionado.getFormWaistWidth()));
                            cadastroFormulario.jTFormularioObjetivo.setText(cadastroSelecionado.getFormObjective());
                            cadastroFormulario.jTAFormularioHabito.setText(cadastroSelecionado.getFormHabits());
                            cadastroFormulario.jTAFormularioExercicio.setText(cadastroSelecionado.getFormExercises());
                            cadastroFormulario.jTAFormularioAlimentacao.setText(cadastroSelecionado.getFormFeedingPattern());
                            cadastroFormulario.jTAFormularioSintoma.setText(cadastroSelecionado.getFormSintoms());
                            cadastroFormulario.jTAFormularioUrina.setText(cadastroSelecionado.getFormUrine());
                            cadastroFormulario.jTAFormularioFezes.setText(cadastroSelecionado.getFormFeces());
                            cadastroFormulario.jTAFormularioObservacao.setText(cadastroSelecionado.getFormObservation());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_jTbFormularioMouseClicked

    private void jBNovoFormMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBNovoFormMouseClicked
        try {
            CadastroFormulario cadastroFormulario = new CadastroFormulario();
            CadastroFormularioDao cadastroDao = new CadastroFormularioDao();
            ArrayList<CadastroFormularioModel> listaCadastros = cadastroDao.consultar();
            CadastroFormularioModel cadastroNovo;

            cadastroNovo = new CadastroFormularioModel();

            int novoID = 0;
            for (CadastroFormularioModel cadastro : listaCadastros) {
                if (cadastro.getFormID() > novoID) {
                    novoID = cadastro.getFormID();
                }
            }
            novoID++;
            cadastroNovo.setFormID(novoID);
            cadastroFormulario.jTFormularioID.setText(String.valueOf(novoID));

            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
            String dataAtual = dateFormat.format(new Date());
            cadastroFormulario.jFFormularioDtExame.setText(dataAtual);
            cadastroFormulario.jCPacienteSexo.setEnabled(false);

            cadastroNovo.setFormStatusName("Em andamento");
            
            atualizaTabelaForm(listaCadastros);

            cadastroFormulario.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao criar um novo formulário:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBNovoFormMouseClicked

    private void jTbUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTbUsuarioMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            new Thread() {
                @Override
                public void run() {

                    try {
                        if (jTbUsuario.getSelectedRow() != -1) {
                            int linha = jTbUsuario.getSelectedRow();

                            CadastroUsuarioModel cadastroSelecionado = listaUsuarioFiltrada.get(linha);

                            CadastroUsuario cadastroUsuario = new CadastroUsuario();
                            cadastroUsuario.setVisible(true);
                            cadastroUsuario.jTUsuarioID.setText(String.valueOf(cadastroSelecionado.getUserID()));
                            cadastroUsuario.jCUsuarioStatus.setSelectedItem(cadastroSelecionado.getUserStatusName());
                            cadastroUsuario.jCUsuarioPermissao.setSelectedItem(cadastroSelecionado.getPermissionsType());
                            cadastroUsuario.jTUsuarioLogin.setText(cadastroSelecionado.getUserLogin());
                            cadastroUsuario.jPUsuarioSenha.setText(cadastroSelecionado.getUserPassword());
                            cadastroUsuario.jTUsuarioNome.setText(cadastroSelecionado.getUserName());

                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                            String dataFormatada = dateFormat.format(cadastroSelecionado.getUserBirthdate());
                            cadastroUsuario.jFUsuarioNascimento.setText(dataFormatada);

                            cadastroUsuario.jFUsuarioCPF.setText(cadastroSelecionado.getUserCPF());
                            cadastroUsuario.jFUsuarioRG.setText(cadastroSelecionado.getUserRG());
                            cadastroUsuario.jCUsuarioSexo.setSelectedItem(cadastroSelecionado.getSexName());
                            cadastroUsuario.jTCRN.setText(cadastroSelecionado.getCRN());
                            cadastroUsuario.jCUsuarioRegiao.setSelectedItem(cadastroSelecionado.getRegionName());
                            cadastroUsuario.jCUsuarioNacionalidade.setSelectedItem(cadastroSelecionado.getCountryName());
                            cadastroUsuario.jTUsuarioTelefone.setText(cadastroSelecionado.getUserTelefone());
                            cadastroUsuario.jTUsuarioEmail.setText(cadastroSelecionado.getUserEmail());
                            cadastroUsuario.jTUsuarioObservacao.setText(cadastroSelecionado.getUserObservation());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_jTbUsuarioMouseClicked

    private void jBNovoUsuarioMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBNovoUsuarioMouseClicked
        try {
            CadastroUsuario cadastroUsuario = new CadastroUsuario();
            CadastroUsuarioDao cadastroDao = new CadastroUsuarioDao();
            ArrayList<CadastroUsuarioModel> listaCadastros = cadastroDao.consultar();
            CadastroUsuarioModel cadastroNovo;

            cadastroNovo = new CadastroUsuarioModel();

            int novoID = 0;
            for (CadastroUsuarioModel cadastro : listaCadastros) {
                if (cadastro.getUserID() > novoID) {
                    novoID = cadastro.getUserID();
                }
            }
            novoID++;
            cadastroNovo.setUserID(novoID);
            cadastroUsuario.jTUsuarioID.setText(String.valueOf(novoID));
            
            atualizaTabelaUsuario(listaCadastros);

            cadastroUsuario.setVisible(true);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao criar um novo formulário:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBNovoUsuarioMouseClicked

    private void jTbPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTbPacienteMouseClicked
        if (evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            new Thread() {
                @Override
                public void run() {
                    try {
                        if (jTbPaciente.getSelectedRow() != -1) {
                            int linha = jTbPaciente.getSelectedRow();

                            CadastroPacienteModel cadastroSelecionado = listaPacienteFiltrada.get(linha);

                            CadastroPaciente cadastroPaciente = new CadastroPaciente();
                            cadastroPaciente.setVisible(true);
                            cadastroPaciente.jTPacienteID.setText(String.valueOf(cadastroSelecionado.getPatientID()));
                            cadastroPaciente.jTPacienteNome.setText(cadastroSelecionado.getPatientName());

                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                            String dataFormatada = dateFormat.format(cadastroSelecionado.getPatientBirthdate());

                            cadastroPaciente.jFPacienteNascimento.setText(dataFormatada);
                            cadastroPaciente.jFPacienteCPF.setText(cadastroSelecionado.getPatientCPF());
                            cadastroPaciente.jFPacienteRG.setText(cadastroSelecionado.getPatientRG());
                            cadastroPaciente.jCPacienteSexo.setSelectedItem(cadastroSelecionado.getSexName());
                            cadastroPaciente.jCPacienteNacionalidade.setSelectedItem(cadastroSelecionado.getCountryName());
                            cadastroPaciente.jTPacienteTelefone.setText(cadastroSelecionado.getPatientTelefone());
                            cadastroPaciente.jTPacienteEmail.setText(cadastroSelecionado.getPatientEmail());

                            String cepFormatado = "";
                            if (cadastroSelecionado.getPatientCEP() != null) {
                                cepFormatado = cadastroSelecionado.getPatientCEP().replace("-", "");
                            }

                            cadastroPaciente.jFPacienteCEP.setText(cepFormatado);
                            cadastroPaciente.preencherEnderecoPorCEP();
                            cadastroPaciente.jTAPacienteAlergia.setText(cadastroSelecionado.getPatientAllergies());
                            cadastroPaciente.jTAPacienteIntolerancia.setText(cadastroSelecionado.getIntolerance());
                            cadastroPaciente.jTPacienteProfissao.setText(cadastroSelecionado.getPatientJob());
                            cadastroPaciente.jTAPacienteMental.setText(cadastroSelecionado.getPatientMentalHistory());
                            cadastroPaciente.jTAPacienteDoencas.setText(cadastroSelecionado.getPatientPathological());
                            cadastroPaciente.jTAPacienteObservacao.setText(cadastroSelecionado.getPatientObservation());
                        }
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
                    }
                }
            }.start();
        }
    }//GEN-LAST:event_jTbPacienteMouseClicked

    private void jBNovoPacienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBNovoPacienteMouseClicked
        try {
            CadastroPaciente cadastroPaciente = new CadastroPaciente();
            CadastroPacienteDao cadastroDao = new CadastroPacienteDao();
            ArrayList<CadastroPacienteModel> listaCadastros = cadastroDao.consultar();
            CadastroPacienteModel cadastroNovo;

            cadastroNovo = new CadastroPacienteModel();
            int novoID = 0;
            for (CadastroPacienteModel cadastro : listaCadastros) {
                if (cadastro.getPatientID() > novoID) {
                    novoID = cadastro.getPatientID();
                }
            }
            novoID++;
            cadastroNovo.setPatientID(novoID);
            cadastroPaciente.jTPacienteID.setText(String.valueOf(novoID));

            cadastroPaciente.setVisible(true);
            
            atualizaTabelaPaciente(listaCadastros);

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao criar um novo formulário:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBNovoPacienteMouseClicked

    private void jBFPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBFPesquisarMouseClicked
        filtrarFormulario();
    }//GEN-LAST:event_jBFPesquisarMouseClicked

    private void jBPPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBPPesquisarMouseClicked
        filtrarPaciente();
    }//GEN-LAST:event_jBPPesquisarMouseClicked

    private void jBUPesquisarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBUPesquisarMouseClicked
        filtrarUsuario();
    }//GEN-LAST:event_jBUPesquisarMouseClicked

    private void jBCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBCancelarMouseClicked
        int linha = jTbFormulario.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para cancelar.");
            return;
        }

        CadastroFormularioDao cadastroDao = new CadastroFormularioDao();
        ArrayList<CadastroFormularioModel> listaCadastros = cadastroDao.consultar();
        if (listaFormFiltrada != null) {
                listaCadastros = listaFormFiltrada;
            } else {
                listaCadastros = cadastroDao.consultar();
            }

        CadastroFormularioModel cadastroSelecionado = listaCadastros.get(linha);
        String status = cadastroSelecionado.getFormStatusName();    

        if ("Em andamento".equals(status)) {
            cadastroSelecionado.setFormStatusName("Cancelado");
            cadastroDao.alterar(cadastroSelecionado);
            JOptionPane.showMessageDialog(null, "Formulário cancelado com sucesso.");
            atualizaTabelaForm(listaCadastros);
        } else {
            JOptionPane.showMessageDialog(null, "Exame concluído ou cancelado");
        }
    }//GEN-LAST:event_jBCancelarMouseClicked

    private void jBReverterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBReverterMouseClicked
        int linha = jTbFormulario.getSelectedRow();
        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para cancelar.");
            return;
        }

        try {
            CadastroFormularioDao cadastroDao = new CadastroFormularioDao();

            ArrayList<CadastroFormularioModel> listaCadastros;
            if (listaFormFiltrada != null) {
                listaCadastros = listaFormFiltrada;
            } else {
                listaCadastros = cadastroDao.consultar();
            }

            CadastroFormularioModel cadastroSelecionado = listaCadastros.get(linha);
            String status = cadastroSelecionado.getFormStatusName();

            if ("Cancelado".equals(status)) {
                cadastroSelecionado.setFormStatusName("Em Andamento");
                cadastroDao.alterar(cadastroSelecionado);
                JOptionPane.showMessageDialog(null, "Cancelamento revertido com sucesso.");

                atualizaTabelaForm(listaCadastros);
            } else {
                JOptionPane.showMessageDialog(null, "Exame não está cancelado.");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro ao reverter o cancelamento:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jBReverterMouseClicked

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        new Thread() {
            @Override
            public void run() {
                if (adminStatus == 0) {
                    int index = jTabbedPane1.indexOfTab("Usuário");
                    if (index != -1) {
                        jTabbedPane1.removeTabAt(index);
                    }
                    jBCancelar.setVisible(false);
                    jBReverter.setVisible(false);
                }
                try {
                    filtrarFormulario();
                    filtrarPaciente();
                    filtrarUsuario();
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro ao atualizar as tabelas:\n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
                }
            }
        }.start();
    }//GEN-LAST:event_formWindowGainedFocus

    public void atualizaTabelaForm(ArrayList<CadastroFormularioModel> listaCadastros) {
        DefaultTableModel modeloTabela = (DefaultTableModel) jTbFormulario.getModel();
        modeloTabela.setRowCount(0);

        listaFormFiltrada.clear();
        listaFormFiltrada.addAll(listaCadastros);

        try {
            for (CadastroFormularioModel cadastro : listaCadastros) {
                modeloTabela.addRow(new Object[]{
                    cadastro.getFormID(),
                    cadastro.getPatientID(),
                    cadastro.getPatientName(),
                    cadastro.getSexName(),
                    cadastro.getPatientBirthdate(),
                    cadastro.getFormExamDate(),
                    cadastro.getFormStatusName()
                });
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void atualizaTabelaPaciente(ArrayList<CadastroPacienteModel> listaCadastros) {
        DefaultTableModel modeloTabela = (DefaultTableModel) jTbPaciente.getModel();
        modeloTabela.setRowCount(0);

        listaPacienteFiltrada.clear();
        listaPacienteFiltrada.addAll(listaCadastros);

        try {
            for (CadastroPacienteModel cadastro : listaCadastros) {
                modeloTabela.addRow(new String[]{Integer.toString(cadastro.getPatientID()),
                    cadastro.getPatientName(),
                    cadastro.getPatientBirthdate().toString(),
                    cadastro.getPatientCPF(),
                    cadastro.getPatientRG(),
                    cadastro.getSexName()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
        }
    }

    public void atualizaTabelaUsuario(ArrayList<CadastroUsuarioModel> listaCadastros) {
        DefaultTableModel modeloTabela = (DefaultTableModel) jTbUsuario.getModel();
        modeloTabela.setRowCount(0);

        listaUsuarioFiltrada.clear();
        listaUsuarioFiltrada.addAll(listaCadastros);

        try {
            for (CadastroUsuarioModel cadastro : listaCadastros) {
                modeloTabela.addRow(new String[]{Integer.toString(cadastro.getUserID()),
                    cadastro.getUserLogin(),
                    cadastro.getCRN(),
                    cadastro.getUserName(),
                    cadastro.getUserBirthdate().toString(),
                    cadastro.getUserCPF(),
                    cadastro.getSexName(),
                    cadastro.getUserStatusName()});
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro inesperado:\n" + ex.getMessage(), "ERRO!", ERROR_MESSAGE);
        }
    }

    private void preencherIdade(CadastroFormulario cadastroFormulario) {
        try {
            String dtNascimentoText = cadastroFormulario.jFPacienteNascimento.getText().replaceAll("\\s", "").trim();

            if (!dtNascimentoText.isEmpty()) {
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                LocalDate dtNascimento = LocalDate.parse(dtNascimentoText, formatter);
                LocalDate currentDate = LocalDate.now();
                Period period = Period.between(dtNascimento, currentDate);

                int idade = period.getYears();
                cadastroFormulario.jTFormularioIdade.setText(String.valueOf(idade));
            } else {
                JOptionPane.showMessageDialog(null, "Data de nascimento está vazia!");
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Ocorreu um erro: " + ex.getMessage());
        }
    }

    private void filtrarUsuario() {
        CadastroUsuarioDao cadastroDao = new CadastroUsuarioDao();
        try {
            int usuarioId = 0;
            if (!jTUUserID.getText().trim().isEmpty()) {
                usuarioId = Integer.parseInt(jTUUserID.getText().trim());
            }

            String CRN = jTUCRN.getText().trim().replaceAll("\\s", "");

            String nome = jTUNome.getText().trim();

            String dataNascimentoStr = jFUDataNascimento.getText().trim().replaceAll("\\s+", "");
            Date dataNascimento = null;
            if (!dataNascimentoStr.isEmpty() && !dataNascimentoStr.equals("//")) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                sdf.setLenient(false);

                try {
                    dataNascimento = sdf.parse(dataNascimentoStr);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(null, "Data de nascimento inválida. Formato esperado: dd/MM/yyyy", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }
            String status = (String) jCUStatus.getSelectedItem();

            if (status.equals("   ")) {
                status = null;
            }

            FiltroUsuario filtro = new FiltroUsuario(usuarioId, CRN, nome, dataNascimento, status);
            ArrayList<CadastroUsuarioModel> resultados = cadastroDao.buscarComFiltro(filtro);

            atualizaTabelaUsuario(resultados);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao processar filtros. Verifique os dados informados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filtrarPaciente() {
        CadastroPacienteDao cadastroDao = new CadastroPacienteDao();
        try {
            int patientId = 0;
            if (!jTPPacientID.getText().trim().isEmpty()) {
                patientId = Integer.parseInt(jTPPacientID.getText().trim());
            }

            String nome = jTPNome.getText().trim();
            String dataNascimentoStr = jFPDataNascimento.getText().trim().replaceAll("\\s+", "");

            Date dataNascimento = null;
            if (!dataNascimentoStr.isEmpty() && !dataNascimentoStr.equals("//")) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                sdf.setLenient(false);

                try {
                    dataNascimento = sdf.parse(dataNascimentoStr);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(null, "Data de nascimento inválida. Formato esperado: dd/MM/yyyy", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            String cpf = "";

            FiltroPaciente filtro = new FiltroPaciente(patientId, nome, dataNascimento, cpf);

            ArrayList<CadastroPacienteModel> resultados = cadastroDao.buscarComFiltro(filtro);

            atualizaTabelaPaciente(resultados);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao processar filtros. Verifique os dados informados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void filtrarFormulario() {
        CadastroFormularioDao cadastroDao = new CadastroFormularioDao();
        try {
            int formId = 0;
            if (!jTFFormID.getText().trim().isEmpty()) {
                formId = Integer.parseInt(jTFFormID.getText().trim());
            }

            int patientId = 0;
            if (!jTFPacientID.getText().trim().isEmpty()) {
                patientId = Integer.parseInt(jTFPacientID.getText().trim());
            }

            String nome = jTFNome.getText().trim();
            String dataNascimentoStr = jFFDataNascimento.getText().trim().replaceAll("\\s+", "");

            Date dataNascimento = null;
            if (!dataNascimentoStr.isEmpty() && !dataNascimentoStr.equals("//")) {
                SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy");
                sdf.setLenient(false);

                try {
                    dataNascimento = sdf.parse(dataNascimentoStr);
                } catch (ParseException e) {
                    JOptionPane.showMessageDialog(null, "Data de nascimento inválida. Formato esperado: dd/MM/yyyy", "Erro", JOptionPane.ERROR_MESSAGE);
                    return;
                }
            }

            String status = (String) jCFStatus.getSelectedItem();
            if (status.equals("   ")) {
                status = null;
            }

            FiltroFormulario filtro = new FiltroFormulario(formId, patientId, nome, dataNascimento, status);

            ArrayList<CadastroFormularioModel> resultados = cadastroDao.buscarComFiltro(filtro);

            atualizaTabelaForm(resultados);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao processar filtros. Verifique os dados informados.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Tabelas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Tabelas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Tabelas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Tabelas.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Tabelas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCancelar;
    private javax.swing.JButton jBFPesquisar;
    private javax.swing.JButton jBNovoForm;
    private javax.swing.JButton jBNovoPaciente;
    private javax.swing.JButton jBNovoUsuario;
    private javax.swing.JButton jBPPesquisar;
    private javax.swing.JButton jBReverter;
    private javax.swing.JButton jBUPesquisar;
    private javax.swing.JComboBox<String> jCFStatus;
    private javax.swing.JComboBox<String> jCUStatus;
    private javax.swing.JFormattedTextField jFFDataNascimento;
    private javax.swing.JFormattedTextField jFPDataNascimento;
    private javax.swing.JFormattedTextField jFUDataNascimento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane78;
    private javax.swing.JScrollPane jScrollPane79;
    private javax.swing.JScrollPane jScrollPane80;
    private javax.swing.JTextField jTFFormID;
    private javax.swing.JTextField jTFNome;
    private javax.swing.JTextField jTFPacientID;
    private javax.swing.JTextField jTPNome;
    private javax.swing.JTextField jTPPacientID;
    private javax.swing.JTextField jTUCRN;
    private javax.swing.JTextField jTUNome;
    private javax.swing.JTextField jTUUserID;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTbFormulario;
    private javax.swing.JTable jTbPaciente;
    private javax.swing.JTable jTbUsuario;
    // End of variables declaration//GEN-END:variables
}
